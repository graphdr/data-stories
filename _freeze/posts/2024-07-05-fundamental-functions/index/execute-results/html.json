{
  "hash": "3e718abbeb935ea9264b5a19a36d205e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Revisiting basic data transforms\"\ndescription: |\n   To reproduce a recently-posted set of dplyr examples, adding equivalent code in base R and data.table for comparison as well as expanding the scope of the examples.   \ndate: \"July 15, 2024\"\ndate-format: \"YYYY--MM--DD\"\ncategories: [R, data.table, dplyr, base R]\ncap-location: margin\nimage: \"thumbnail.png\"\ndraft: true\ncode-fold: false\n---\n\n\n\n\n::: callout-note\n## Summary\n\n<em>Having read a recent blog post explaining basic dplyr functions, I was curious what the equivalent base R and data.table code would be. </em>\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nlibrary(dplyr)\nlibrary(palmerpenguins)\n```\n:::\n\n\n## Background\n\nIn a recent blog post, Albert Rapp [-@Rapp:2024] describes 6 functions of the dplyr package---`count()`, `select()`, `filter()`, `mutate()`, `summarize()`, and `arrange()`---under the heading, \"The 6 most fundamental functions for data cleaning with R\" \\[in the Tidyverse\\].\n\nI thought I would explore the same examples in a little more detail and (as many have done before me) compare and contrast the dplyr syntax to that of data.table and base R. My primary references for translating between the \"dialects\" are [@Atrebas:2019] and [@Zumel+Mount:2020, Ch. 5]. As Zumel and Mount state,\n\n> Each of these \\[dplyr, data.table, and base R\\] has its advantages, which is why we are presenting more than one solution...we are deliberately using a polyglot approach to data wrangling: mixing base R, data.table, and dplyr, as convenient. Each of these systems has its strengths...\n\nA note on pipes: If a dplyr function such as `select()` is used without piping (base R `|>` or magrittr `%>%`), the operation has the form, \n\n        select(data_frame, column_name)\n\nwhere the first argument is the data frame from which `column_name` is selected. With a pipe however, the first argument is commonly *implied*, as in  \n\n        data_frame %>% select(column_name)\n\nor\n\n        data_frame |> select(column_name)\n\nWhile a pipe or its equivalent is available in base R and data.table, I prefer breaking a code sequence into separate, intermediate results. As Norman Matloff puts it [-@Matloff:2023],\n\n> During the writing of the code, the breaking down the overall action into simple intermediate steps make it easier for the author to plan out the trajectory of the code. ... For the same reasons, I assert that such code is easier to write and debug, but also easier for others to read. ... And yes, worth the bit of clutter!\n\nOutline:\n\n*Data selection*\n\n- Subsetting rows and columns\n- Removing rows with incomplete data\n- Removing columns\n- Ordering rows and columns\n\n*Basic transforms*\n\n- Adding new columns\n- Renaming columns\n- Recoding column values\n\n*Aggregating transforms*\n\n- Counting frequency of observations\n- Summarizing (many rows into summary rows)\n\n## Getting started\n\n I first load the `penguins` data set from the palmerpenguins package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(penguins)\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 344 × 8\n#>    species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n#>    <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n#>  1 Adelie  Torgersen           39.1          18.7               181        3750\n#>  2 Adelie  Torgersen           39.5          17.4               186        3800\n#>  3 Adelie  Torgersen           40.3          18                 195        3250\n#>  4 Adelie  Torgersen           NA            NA                  NA          NA\n#>  5 Adelie  Torgersen           36.7          19.3               193        3450\n#>  6 Adelie  Torgersen           39.3          20.6               190        3650\n#>  7 Adelie  Torgersen           38.9          17.8               181        3625\n#>  8 Adelie  Torgersen           39.2          19.6               195        4675\n#>  9 Adelie  Torgersen           34.1          18.1               193        3475\n#> 10 Adelie  Torgersen           42            20.2               190        4250\n#> # ℹ 334 more rows\n#> # ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\nI use the data set in three formats: as a base R data.frame object `penguins_base`, as a data.table object `penguins_DT`, and as a tibble object `penguins` (as-is). \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_base <- data.frame(penguins)\npenguins_DT <- data.table(penguins)\n\nclass(penguins_base)\n#> [1] \"data.frame\"\nclass(penguins_DT)\n#> [1] \"data.table\" \"data.frame\"\nclass(penguins)\n#> [1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n\n\n\n\n\n\n\n\n## Subsetting rows and columns\n\n#### Boolean greater than\n\n***Solution 1: base R***\n\n`[,]` indexing plus `drop = FALSE`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrows_we_want <- penguins_base$bill_length_mm > 55\ncolumns_we_want <- c(\"species\", \"flipper_length_mm\", \"bill_length_mm\")\npenguins_base[rows_we_want, columns_we_want, drop = FALSE]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>        species flipper_length_mm bill_length_mm\n#> NA        <NA>                NA             NA\n#> 186     Gentoo               230           59.6\n#> 254     Gentoo               228           55.9\n#> 268     Gentoo               230           55.1\n#> NA.1      <NA>                NA             NA\n#> 294  Chinstrap               181           58.0\n#> 340  Chinstrap               207           55.8\n```\n\n\n:::\n:::\n\n\nTo clean this up a bit, we omit the NA rows and reset the row names. I'll use `dframe` for temporary intermediate results.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndframe <- penguins_base[rows_we_want, columns_we_want, drop = FALSE]\ndframe <- na.omit(dframe)\nrownames(dframe) <- NULL\ndframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>     species flipper_length_mm bill_length_mm\n#> 1    Gentoo               230           59.6\n#> 2    Gentoo               228           55.9\n#> 3    Gentoo               230           55.1\n#> 4 Chinstrap               181           58.0\n#> 5 Chinstrap               207           55.8\n```\n\n\n:::\n:::\n\n\n***Solution 2: data.table***\n\n`[i, j]` indexing and `..` notation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrows_we_want <- penguins_DT$bill_length_mm > 55\ncolumns_we_want <- c(\"species\", \"flipper_length_mm\", \"bill_length_mm\")\npenguins_DT[rows_we_want, ..columns_we_want]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>      species flipper_length_mm bill_length_mm\n#>       <fctr>             <int>          <num>\n#> 1:    Gentoo               230           59.6\n#> 2:    Gentoo               228           55.9\n#> 3:    Gentoo               230           55.1\n#> 4: Chinstrap               181           58.0\n#> 5: Chinstrap               207           55.8\n```\n\n\n:::\n:::\n\n\n***Solution 3: dplyr***\n\n`filter()` and `select()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  filter(bill_length_mm > 55) %>%\n  select(species, flipper_length_mm, bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 5 × 3\n#>   species   flipper_length_mm bill_length_mm\n#>   <fct>                 <int>          <dbl>\n#> 1 Gentoo                  230           59.6\n#> 2 Gentoo                  228           55.9\n#> 3 Gentoo                  230           55.1\n#> 4 Chinstrap               181           58  \n#> 5 Chinstrap               207           55.8\n```\n\n\n:::\n:::\n\n\n\n\n#### Boolean between\n\n***Solution 1: base R***\n\n`with()` improve clarity no `$`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrows_we_want <- with(penguins_base, bill_length_mm >= 55 & bill_length_mm <= 58)\ncolumns_we_want <- c(\"species\", \"flipper_length_mm\", \"bill_length_mm\")\ndframe <- penguins_base[rows_we_want, columns_we_want, drop = FALSE]\ndframe <- na.omit(dframe)\nrownames(dframe) <- NULL\ndframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>     species flipper_length_mm bill_length_mm\n#> 1    Gentoo               228           55.9\n#> 2    Gentoo               230           55.1\n#> 3 Chinstrap               181           58.0\n#> 4 Chinstrap               207           55.8\n```\n\n\n:::\n:::\n\n\n***Solution 2: data.table***\n\n`%between%`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrows_we_want <- with(penguins_DT, bill_length_mm %between% c(55, 58))\ncolumns_we_want <- c(\"species\", \"flipper_length_mm\", \"bill_length_mm\")\npenguins_DT[rows_we_want, ..columns_we_want]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>      species flipper_length_mm bill_length_mm\n#>       <fctr>             <int>          <num>\n#> 1:    Gentoo               228           55.9\n#> 2:    Gentoo               230           55.1\n#> 3: Chinstrap               181           58.0\n#> 4: Chinstrap               207           55.8\n```\n\n\n:::\n:::\n\n\n***Solution 3: dplyr***\n\n`filter(dframe, between())`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  filter(between(bill_length_mm, 55, 58)) %>%\n  select(species, flipper_length_mm, bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 4 × 3\n#>   species   flipper_length_mm bill_length_mm\n#>   <fct>                 <int>          <dbl>\n#> 1 Gentoo                  228           55.9\n#> 2 Gentoo                  230           55.1\n#> 3 Chinstrap               181           58  \n#> 4 Chinstrap               207           55.8\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## Removing rows with incomplete data\n\n***Solution 1: base R***\n\n\n\n***Solution 2: data.table***\n\n\n\n***Solution 3: dplyr***\n\n\n\n\n\n\n\n\n\n\n\n\n## Removing columns\n\n***Solution 1: base R***\n\n\n\n***Solution 2: data.table***\n\n\n\n***Solution 3: dplyr***\n\n\n\n\n\n\n\n\n\n\n\n\n## Ordering rows and columns\n\n***Solution 1: base R***\n\n\n\n***Solution 2: data.table***\n\n\n\n***Solution 3: dplyr***\n\n\n\n\n\n\n\n\n\n\n\n\n## Adding new columns\n\n#### Scaling a numeric column\n\n`scale()` is a base R function that centers or scales a numeric column (or more generally, the columns of a numeric matrix). By itself, `scale()` creates an array. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- scale(penguins[, \"bill_length_mm\"])\nclass(x)\n#> [1] \"matrix\" \"array\"\nstr(x)\n#>  num [1:344, 1] -0.883 -0.81 -0.663 NA -1.323 ...\n#>  - attr(*, \"dimnames\")=List of 2\n#>   ..$ : NULL\n#>   ..$ : chr \"bill_length_mm\"\n#>  - attr(*, \"scaled:center\")= Named num 43.9\n#>   ..- attr(*, \"names\")= chr \"bill_length_mm\"\n#>  - attr(*, \"scaled:scale\")= Named num 5.46\n#>   ..- attr(*, \"names\")= chr \"bill_length_mm\"\n```\n:::\n\n\nUsing conventional R indexing `[, j]`, we extract the numeric column from the array as a simple numeric vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- scale(penguins[, \"bill_length_mm\"])[, 1]\nclass(x)\n#> [1] \"numeric\"\nstr(x)\n#>  num [1:344] -0.883 -0.81 -0.663 NA -1.323 ...\n```\n:::\n\n\n***Solution 1: base R***\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subset to retain one column\ndframe <- penguins_base[, \"bill_length_mm\", drop = FALSE]\n\n# Create a new column based on the existing column\ndframe$scaled_bill_length <- scale(penguins_base$bill_length_mm)[, 1]\nstr(dframe)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> 'data.frame':\t344 obs. of  2 variables:\n#>  $ bill_length_mm    : num  39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n#>  $ scaled_bill_length: num  -0.883 -0.81 -0.663 NA -1.323 ...\n```\n\n\n:::\n:::\n\n\n***Solution 2: data.table***\n\nCreate a new column using `:=`, which adds the new column \"by reference\", thus an assignment operation `q <-` is not required^[The `:=` operator updates data.table columns in-place (by reference). It makes no copies of any part of memory at all---a feature designed for fast and memory-efficient code]. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subset to retain one column\ndframe <- penguins_DT[, .(bill_length_mm)]\n\n# Create a new column based on the existing column\ndframe[, scaled_bill_length := scale(bill_length_mm)[, 1]]\ndframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>      bill_length_mm scaled_bill_length\n#>               <num>              <num>\n#>   1:           39.1        -0.88320467\n#>   2:           39.5        -0.80993901\n#>   3:           40.3        -0.66340769\n#>   4:             NA                 NA\n#>   5:           36.7        -1.32279862\n#>  ---                                  \n#> 340:           55.8         2.17563660\n#> 341:           43.5        -0.07728242\n#> 342:           49.6         1.04001889\n#> 343:           50.8         1.25981586\n#> 344:           50.2         1.14991738\n```\n\n\n:::\n:::\n\n\n***Solution 3: dplyr***\n\nUse `mutate()` to create a new column from the old column. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  select(bill_length_mm) %>% \n  mutate(scaled_bill_length = scale(bill_length_mm)[, 1])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 344 × 2\n#>    bill_length_mm scaled_bill_length\n#>             <dbl>              <dbl>\n#>  1           39.1             -0.883\n#>  2           39.5             -0.810\n#>  3           40.3             -0.663\n#>  4           NA               NA    \n#>  5           36.7             -1.32 \n#>  6           39.3             -0.847\n#>  7           38.9             -0.920\n#>  8           39.2             -0.865\n#>  9           34.1             -1.80 \n#> 10           42               -0.352\n#> # ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## Renaming columns\n\n***Solution 1: base R***\n\n\n\n***Solution 2: data.table***\n\n\n\n***Solution 3: dplyr***r\n\n\n\n\n\n\n\n\n\n\n\n\n## Recoding column values\n\n***Solution 1: base R***\n\n\n\n***Solution 2: data.table***\n\n\n\n***Solution 3: dplyr***\n\n\n\n\n\n\n\n\n\n\n\n\n## Counting frequency of observations\n\n#### Count by one variable\n\n***Solution 1: base R***\n\n\n\n***Solution 2: data.table***\n\n\n\n***Solution 3: dplyr***\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 3 × 2\n#>   species       n\n#>   <fct>     <int>\n#> 1 Adelie      152\n#> 2 Chinstrap    68\n#> 3 Gentoo      124\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n#### Count by two variables\n\n***Solution 1: base R***\n\n\n\n***Solution 2: data.table***\n\n\n\n***Solution 3: dplyr***\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  count(species, island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 5 × 3\n#>   species   island        n\n#>   <fct>     <fct>     <int>\n#> 1 Adelie    Biscoe       44\n#> 2 Adelie    Dream        56\n#> 3 Adelie    Torgersen    52\n#> 4 Chinstrap Dream        68\n#> 5 Gentoo    Biscoe      124\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n#### Count and order rows\n\n***Solution 1: base R***\n\n\n\n***Solution 2: data.table***\n\n\n\n***Solution 3: dplyr***\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  count(species, island, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 5 × 3\n#>   species   island        n\n#>   <fct>     <fct>     <int>\n#> 1 Gentoo    Biscoe      124\n#> 2 Chinstrap Dream        68\n#> 3 Adelie    Dream        56\n#> 4 Adelie    Torgersen    52\n#> 5 Adelie    Biscoe       44\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## Summarizing\n\n#### Without grouping\n\n\n***Solution 1: base R***\n\n\n\n***Solution 2: data.table***\n\n\n\n***Solution 3: dplyr***\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  summarize(mean_bill_length_mm = mean(bill_length_mm, na.rm = TRUE),\n            mean_flipper_length_mm = mean(flipper_length_mm, na.rm = TRUE)) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 1 × 2\n#>   mean_bill_length_mm mean_flipper_length_mm\n#>                 <dbl>                  <dbl>\n#> 1                43.9                   201.\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n#### With one group\n\n\n***Solution 1: base R***\n\n\n\n***Solution 2: data.table***\n\n\n\n***Solution 3: dplyr***\n\nuse `ungroup()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  summarize(mean_bill_length_mm = mean(bill_length_mm, na.rm = TRUE),\n            mean_flipper_length_mm = mean(flipper_length_mm, na.rm = TRUE),\n            .by = species) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 3 × 3\n#>   species   mean_bill_length_mm mean_flipper_length_mm\n#>   <fct>                   <dbl>                  <dbl>\n#> 1 Adelie                   38.8                   190.\n#> 2 Gentoo                   47.5                   217.\n#> 3 Chinstrap                48.8                   196.\n```\n\n\n:::\n:::\n\n\n\n#### With multiple groups\n\n\n***Solution 1: base R***\n\n\n\n***Solution 2: data.table***\n\n\n::: {.cell}\n\n:::\n\n\n\n\n***Solution 3: dplyr***\n\nadd `.by` \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  summarize(mean_bill_length_mm = mean(bill_length_mm, na.rm = TRUE),\n            mean_flipper_length_mm = mean(flipper_length_mm, na.rm = TRUE),\n            .by = c(species, island)) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 5 × 4\n#>   species   island    mean_bill_length_mm mean_flipper_length_mm\n#>   <fct>     <fct>                   <dbl>                  <dbl>\n#> 1 Adelie    Torgersen                39.0                   191.\n#> 2 Adelie    Biscoe                   39.0                   189.\n#> 3 Adelie    Dream                    38.5                   190.\n#> 4 Gentoo    Biscoe                   47.5                   217.\n#> 5 Chinstrap Dream                    48.8                   196.\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}