{
  "hash": "6e1fb63b9d5916898fba319ba9eabd18",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"formatdown v0.1.4\"\ndescription: |\n    New functionality for formatting power-of-ten notation in R markdown or Quarto markdown documents. \ndate: \"May 20, 2024\"\ndate-format: \"YYYY--MM--DD\"\ncategories: [R, engineering notation, scientific notation, units, rmarkdown, quarto]\nimage: \"thumbnail.png\"\ncap-location: margin\ndraft: false\n---\n\n\n\n\n::: callout-note\n## Summary\n\n<em>In response to issues raised by users, formatdown has new functionality (and bug fixes) with additional arguments affording greater control over the appearance of the formatted objects.</em>\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(formatdown)\nlibrary(data.table)\nlibrary(knitr)\nlibrary(units)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## Background\n\nMy original motive in developing formatdown was to easily and repeatably produce power-of-ten notation in R markdown documents for single numbers in an inline math markup and for columns of numbers in a table. \n\nI realized that some of the functions in the previous release were actually special cases of the power-of-ten function. So I recast  the power-of-ten function as the more general `format_numbers()`---of which scientific notation, engineering notation, and decimal notation are special cases. I deprecated the earlier stand-alone functions, replacing them with new functions that wrap `format_numbers()` and take advantage of the extended set of arguments.  \n\nAdditionally, I added `format_text()` so that columns of text in a table can be rendered with the same font face and size as the formatted numerical columns. \n\nFinally, in response to a user's request, I added an option for changing the default decimal marker from a period (`.`) to a comma (`,`). It seemed reasonable to make this an option that can be changed globally to avoid having to type this argument in every function call. This led me to consider what *other* arguments a user might want to assign globally---which are now implemented in the new `formatdown_options()` function. \n\n\n\n\n\n\n## `format_numbers()`\n\nUseful for formatting a single number in a sentence. For example, the inline code chunk, \n\n$\\quad$ `` `r format_numbers(6.0221E+23, digits = 5, format = \"sci\")` ``\n\nproduces the following math markup, \n\n        $6.0221 \\times 10^{23}$.\n\nWhen this markup is rendered inline, as shown in the sentence below, we obtain the desired scientific notation. \n\n> The Avogadro constant, $\\small N_A =$ $\\small 6.0221 \\times 10^{23}$, is the number of constituent particles (usually molecules, atoms, or ions) per mole. \n\n`format_numbers()` is also useful for columns in a table.  For example, the elastic modulus of several metals are tabulated below in engineering notation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data set included in formatdown\ndata(\"metals\")\n\n# Extract two columns (data.table syntax)\nDT <- metals[, .(metal, elast_mod)]\n\n# Format one column\nDT$elast_mod <- format_numbers(DT$elast_mod, digits = 3, format = \"engr\")\n\n# Display the table\nknitr::kable(DT, col.names = c(\"metal\", \"modulus (Pa)\"))\n```\n\n::: {.cell-output-display}\n\n\n|metal         |modulus (Pa)                |\n|:-------------|:---------------------------|\n|aluminum 6061 |$\\small 73.1 \\times 10^{9}$ |\n|copper        |$\\small 117 \\times 10^{9}$  |\n|lead          |$\\small 13.8 \\times 10^{9}$ |\n|platinum      |$\\small 147 \\times 10^{9}$  |\n|steel 1020    |$\\small 207 \\times 10^{9}$  |\n|titanium      |$\\small 102 \\times 10^{9}$  |\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n## `format_text()`\n\nThe table above also illustrates the difference in typefaces between a formatted numerical column and an unformatted text column. To format the text in a matching typeface, we use `format_text()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Format the text column\nDT$metal <- format_text(DT$metal)\n\n# Display the table\nknitr::kable(DT, col.names = c(\"metal\", \"modulus (Pa)\"))\n```\n\n::: {.cell-output-display}\n\n\n|metal                            |modulus (Pa)                |\n|:--------------------------------|:---------------------------|\n|$\\small \\mathrm{aluminum\\>6061}$ |$\\small 73.1 \\times 10^{9}$ |\n|$\\small \\mathrm{copper}$         |$\\small 117 \\times 10^{9}$  |\n|$\\small \\mathrm{lead}$           |$\\small 13.8 \\times 10^{9}$ |\n|$\\small \\mathrm{platinum}$       |$\\small 147 \\times 10^{9}$  |\n|$\\small \\mathrm{steel\\>1020}$    |$\\small 207 \\times 10^{9}$  |\n|$\\small \\mathrm{titanium}$       |$\\small 102 \\times 10^{9}$  |\n\n\n:::\n:::\n\n\nLike the numerical column, the text column is also math delimited. Thus the elements of the \"metal\" column have a markup similar to:\n\n        $\\mathrm{aluminum\\>6061}$\n\nThe whitespace macro (`\\>`) preserves the horizontal space between words. \n\n\n\n\n\n## `formatdown_options()`\n\nGlobal options are provided for arguments that users would be likely to prefer to set once in a document instead of repeating in every function call. Globally-set arguments can be overridden locally by assigning them in a function call.\n\n`formatdown_options()` can be used to view current settings, assign new settings, or reset to defaults. Arguments include: \n\n- `delim`: left and right math markup delimiters. \n- `size`: font size \"scriptsize\", \"small\", \"normalsize\", etc. \n- `decimal_mark`: a period \".\" or a comma \",\".\n- `big_mark` and `big_interval`: For numbers with many digits to the left of the decimal, readability can sometimes be improved by inserting a thin space between groups of digits. `big_mark` defines the thin space and `big_interval` defines the number of digits in a group. \n- `small_mark` and `small_interval`: Similar to above but to the right of the decimal.  \n- `whitespace`: Preserve horizontal spaces when text appears in a math-delimited output.\n\nTo \"get\" the current settings, \n\n        formatdown_options(\"delim\", \"size\")\n\nTo \"set\" new settings,  \n\n        formatdown_options(delim = \"\\\\(\", size = \"small\")\n\nTo reset to the default settings, \n\n        formatdown_options(reset = TRUE)\n\nFor examples of how changing the options changes the appearance of the output, I recommend the [Global settings](https://graphdr.github.io/formatdown/articles/global_settings.html) vignette at the package website. \n\n\n\n\n## Wrappers\n\nAs mentioned earlier, we can use `format_numbers()` to format scientific, engineering, or decimal notation, or we can use one of the new convenience functions `format_sci()`, `format_engr()`, or `format_dcml()` which simply wrap `format_numbers()` with some pre--set arguments. \n\n\n::: {.cell}\n\n:::\n\n\nThis first example compares scientific notation markups, and shows that the results are identical. When rendered, both `p` and `q` produce $\\small 6.022 \\times 10^{23}$.\n\n\n        # Avogadro constant\n        L <- 6.0221e+23\n        p <- format_numbers(L, format = \"sci\")\n        q <- format_sci(L)\n        all.equal(p, q)\n        #> [1] TRUE\n\n\n::: {.cell}\n\n:::\n\n\nWe get a similar result for engineering notation; here, `p` and `q` both produce $\\small 602.2 \\times 10^{21}$.\n\n        p <- format_numbers(L, format = \"engr\")\n        q <- format_engr(L)\n        all.equal(p, q)\n        #> [1] TRUE\n\n\n## Units\n\nUnit-handling has been scaled back in this version of formatdown, leaving all unit manipulation to the user and the units R package. For example, creating three units-class values $(x, y, z)$ is performed with units functions. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric value\nx <- 10320\nunits(x) <- \"m\"\n\n# The units package reflects operations in units\ny <- x^2\n\n# The units package supports unit conversion\nz <- y\nunits(z) <- \"ft^2\"\n```\n:::\n\n\nThe units *class*, however, is still accommodated by formatdown. If an input argument to `format_numbers()` (or its convenience functions) is of class “units”, formatdown attempts to extract the units character string, format the number in the expected way, and append a units character string to the result. For example, the three values $(x, y, z)$ from the previous code chunk, when formatted, yield the following markups, \n\n        format_sci(x)\n        #> [1] \"$1.032 \\\\times 10^{4}\\\\>\\\\mathrm{m}$\"\n        \n        format_sci(y)\n        #> [1] \"$1.065 \\\\times 10^{8}\\\\>\\\\mathrm{m^{2}}$\"\n        \n        format_sci(z)\n        #> [1] \"$1.146 \\\\times 10^{9}\\\\>\\\\mathrm{ft^{2}}$\"\n\nwhich render as \n\n- $x=$ $\\small 1.032 \\times 10^{4}\\>\\mathrm{m}$\n- $y=$ $\\small 1.065 \\times 10^{8}\\>\\mathrm{m^{2}}$\n- $z=$ $\\small 1.146 \\times 10^{9}\\>\\mathrm{ft^{2}}$\n\n\n## For more information\n\nThe package [website](https://graphdr.github.io/formatdown/index.html) has more examples and details about the new functions and arguments and their application. These recent improvements are largely due to user feedback, so feedback is welcome! \n\n \n\n\n\n## Software credits {.appendix}\n\n- [`R`](https://www.r-project.org/) and [`RStudio`](https://posit.co/) for the working environment  \n- [`rmarkdown`](https://CRAN.R-project.org/package=rmarkdown) and [`knitr`](https://CRAN.R-project.org/package=knitr) for authoring tools  \n- [`data.table`](https://CRAN.R-project.org/package=data.table) for its programmable syntax  \n- [`units`](https://CRAN.R-project.org/package=units) for handling physical units \n- [`wrapr`](https://CRAN.R-project.org/package=wrapr), [`checkmate`](https://CRAN.R-project.org/package=checkmate), and [`tinytest`](https://CRAN.R-project.org/package=tinytest) for programming tools\n- [`devtools`](https://CRAN.R-project.org/package=devtools) and [`pkgdown`](https://CRAN.R-project.org/package=pkgdown) for package building \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}